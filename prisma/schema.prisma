// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model TempUser {
  id             String  @id @default(cuid())
  name           String
  email          String  @unique
  hashedPassword String
  disabled       Boolean @default(true)
  otp            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           UserRole  @default(USER)
  disabled       Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Cart      Cart[]
  Wishlist  Wishlist[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  image    String?   @db.Text
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String         @id @default(cuid())
  sku          String         @unique
  name         String
  description  String         @db.Text
  price        Float
  discountPct  Float          @default(0)
  stockCount   Int            @default(0)
  isAvailable  Boolean        @default(false)
  isFeatured   Boolean        @default(false)
  categorySlug String
  category     Category       @relation(fields: [categorySlug], references: [slug], onDelete: Restrict)
  cartItems    CartItem[]
  images       ProductImage[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  wishlistId String?
}

model ProductImage {
  id        String  @id @default(cuid())
  imageUrl  String  @db.Text
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id     String     @id @default(cuid())
  userId String
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id     String    @id @default(cuid())
  userId String    @unique
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
